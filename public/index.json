[{"content":"Erlang\nHigh availability / Concurrency Fault tolerance\nErlang process is completely isolated from each other.\nno memory share\na crash of one process doesn’t cause a crash of other processes\ncommunicate via asynchronous messages\nScalability\nBEAM can take advantage of all available CPU cores Distribution\nprocesses works the same way in same BEAM instance or remote computer\nErlang-based system is automatically ready to be distributed over multiple machines\nResponsiveness\nI/O operations are internally delegated to separate threads, or a kernel-poll service of the underlying OS is used\nperprocess garbage collection\neach process is individually collected Live update\nErlang development platform\nlanguage\nvirtual machine (BEAM)\nOTP framework\ntools\nElixir\nElixir targets the Erlang runtime.\ncompiled to BEAM-compliant bytecode\nclean syntax\nDisadvantage\nSpeed\nCPU intensive task should consider some other technology\necosystem not large as some other language\nSummary\nDeveloping highly available system\nElixir make such development more pleasant\n","permalink":"http://localhost:1313/pages/chapter-1/","summary":"\u003cp\u003eErlang\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHigh availability / Concurrency\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/assets/2024-12-30_14-49-36_1735541391110_0.png\" alt=\"2024-12-30_14-49-36.png\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eFault tolerance\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eErlang process is completely isolated from each other.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eno memory share\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ea crash of one process doesn’t cause a crash of other processes\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ecommunicate via asynchronous messages\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eScalability\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBEAM can take advantage of all available CPU cores\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDistribution\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eprocesses works the same way in same BEAM instance or remote computer\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eErlang-based system is automatically ready to be distributed over multiple machines\u003c/p\u003e","title":"Chapter 1"},{"content":"Organizing code\nModules\nA module is a collection of functions, somewhat like a namespace defmodule Geometry do def rectangle_area(a, b) do a*b end end Functions def rectangle_area(a, b) do ... end def rectangle_area(a, b), do: a * b + Arity + the number of arguments a function receives + A function is uniquely identified by its containing module, name, and arity + Rectangle.area/2, where /2 denotes the function’s arity. + same name but different arities are two different functions + commonly, a lower-arity function delegates to a higher-arity function, providing some default arguments + `\\\\` operator followed by the argument’s default value defmodule Calculator do def add(a, b \\\\ 0), do: a + b end + generates two functions defmodule Calculator do def add(a), do: add(a, 0) def add(a, b), do: a+b end + cannot accept a variable number of arguments + Visibility + `def` macro is `exported` + `defp` macro is private + can be used only inside the module it’s defined in Imports and alias # Import defmodule MyModule do import IO def my_function do puts \u0026#34;Calling imported function.\u0026#34; end end + Importing a module allows to call its public functions without prefixing them with the module name # Alias defmodule MyModule do alias IO, as: MyIO def my_function do MyIO.puts(\u0026#34;Calling imported function.\u0026#34;) end end defmodule MyModule do alias Geometry.Rectangle, as: Rectangle def my_function do Rectangle.area(...) end end Module attributes\nused as compile-time constants defmodule Circle do @pi 3.14159 def area(r), do: r*r*@pi def circumference(r), do: 2*r*@pi end + attribute can be registered + stored in the generated binary + can be accessed at run time + @module, @doc defmodule Circle do @moduledoc \u0026#34;Implements basic circle functions\u0026#34; @pi 3.14159 @doc \u0026#34;Computes the area of a circle\u0026#34; def area(r), do: r*r*@pi @doc \u0026#34;Computes the circumference of a circle\u0026#34; def circumference(r), do: 2*r*@pi end + Type specification (typespecs) + provide type information for functions defmodule Circle do @pi 3.14159 @spec area(number) :: number def area(r), do: r*r*@pi @spec circumference(number) :: number def circumference(r), do: 2*r*@pi end Type system\nNumbers\ncan be integers or floats\noperator / always returns a float\nAtoms\nliterally named constants :an_atom + consists of `text` and `value` + `text` is what ever after colon character `:` + At runtime, `text` kept in the `atom table` + `value` is data goes into the variable variable = :some_atom + it’s a reference to the atom table + `variable` not contain entire text, but a reference to `atom table` + memory consumption is low + comparisons is fast + code is readable + Aliases + Omit the beginning colon + Start with an uppercase character AnAtom + transformed into `:\u0026quot;Elixir.AnAtom\u0026quot; iex(1)\u0026gt; AnAtom == :\u0026#34;Elixir.AnAtom\u0026#34; true + implicit add `Elixir` prefix + if an alias already contains `Elixir`, prefix is not added iex(2)\u0026gt; AnAtom == Elixir.AnAtom true + Module aliases alias IO, as: MyIO + `MyIO` should transformed into `IO` + `IO` is atom + transformed into `Elixir.IO` iex(5)\u0026gt; MyIO == Elixir.IO true + As booleans + `:true` `true` + `:false` `false` + nil + `:nil` + `nil` + `nil` and `false` is falsy value, everything else is truthy + If all expressions evaluate to a falsy value, the result of the _last expression_ is returned. + Tuples iex(1)\u0026gt; person = {\u0026#34;Bob\u0026#34;, 25} {\u0026#34;Bob\u0026#34;, 25} iex(3)\u0026gt; put_elem(person, 1, 26) {\u0026#34;Bob\u0026#34;, 26} + appropriate for grouping a small, fixed number of elements together + Lists + manage dynamic, variable-sized collections of data iex(1)\u0026gt; prime_numbers = [2, 3, 5, 7] [2, 3, 5, 7] + work like singly linked lists + most of the operations on lists have an O(n) complexity + include `Kernel.length/1` function + Immutability + modifying tuples + always a complete, shallow copy of the old versioin + modifying list + shallow copies of the first n – 1 elements followed by the modified element. After that, the tails are completely shared + benefits + side-effect-free functions and data consistency + Maps iex(1)\u0026gt; empty_map = %{} iex(2)\u0026gt; squares = %{1 =\u0026gt; 1, 2 =\u0026gt; 4, 3 =\u0026gt; 9} iex(3)\u0026gt; squares = Map.new([{1, 1}, {2, 4}, {3, 9}]) %{1 =\u0026gt; 1, 2 =\u0026gt; 4, 3 =\u0026gt; 9} + + Binaries and bitstrings iex(1)\u0026gt; \u0026lt;\u0026lt;1, 2, 3\u0026gt;\u0026gt; \u0026lt;\u0026lt;1, 2, 3\u0026gt;\u0026gt; iex(2)\u0026gt; \u0026lt;\u0026lt;256\u0026gt;\u0026gt; \u0026lt;\u0026lt;0\u0026gt;\u0026gt; iex(5)\u0026gt; \u0026lt;\u0026lt;257::16\u0026gt;\u0026gt; \u0026lt;\u0026lt;1, 1\u0026gt;\u0026gt; + bitstring + total size of all the values isn’t a multiple of 8 iex(7)\u0026gt; \u0026lt;\u0026lt;1::1, 0::1, 1::1\u0026gt;\u0026gt; \u0026lt;\u0026lt;5::size(3)\u0026gt;\u0026gt; + concat bitstring iex(8)\u0026gt; \u0026lt;\u0026lt;1, 2\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;\u0026lt;3, 4\u0026gt;\u0026gt; \u0026lt;\u0026lt;1, 2, 3, 4\u0026gt;\u0026gt; + Strings + Strings are represented using either a binary or a list type + Binary string iex(1)\u0026gt; \u0026#34;This is a string\u0026#34; \u0026#34;This is a string\u0026#34; iex(2)\u0026gt; \u0026#34;Embedded expression: #{3 + 0.14}\u0026#34; \u0026#34;Embedded expression: 3.14\u0026#34; + sigils syntax iex(5)\u0026gt; ~s(This is also a string) \u0026#34;This is also a string\u0026#34; iex(6)\u0026gt; ~s(\u0026#34;Do... or do not. There is no try.\u0026#34; -Master Yoda) \u0026#34;\\\u0026#34;Do... or do not. There is no try.\\\u0026#34; -Master Yoda\u0026#34; iex(7)\u0026gt; ~S(Not interpolated #{3 + 0.14}) \u0026#34;Not interpolated \\#{3 + 0.14}\u0026#34; + + Character lists iex(1)\u0026gt; IO.puts([65, 66, 67]) ABC # ~c sigil iex(2)\u0026gt; IO.puts(~c\u0026#34;ABC\u0026#34;) ABC # single quote iex(3)\u0026gt; IO.puts(\u0026#39;ABC\u0026#39;) ABC + better use `~c` sigil + charlist not compatible with binary string + some functions work only with character lists + pure Erlang library + `String.to_charlist/1` convert a binary string to charlist + prefer binary string + Functions square = fn x -\u0026gt; x*x end Enum.each( [1, 2, 3], fn x -\u0026gt; IO.puts(x) end ) Enum.each( [1, 2, 3], \u0026amp;IO.puts/1 ) iex(7)\u0026gt; lambda = fn x, y, z -\u0026gt; x * y + z end iex(8)\u0026gt; lambda = \u0026amp;(\u0026amp;1 * \u0026amp;2 + \u0026amp;3) + Closures + by holding a reference to a lambda, you indirectly hold a reference to all variables it uses, even if those variables are from the external scope + Higher-level types + Range + It's enumerable iex(1)\u0026gt; range = 1..2 + represented as a map + memory footprint is small and constant + Keyword + Special case of a list + each element is a two-element tuple + first is atom + second can be of any type iex(1)\u0026gt; days = [{:monday, 1}, {:tuesday, 2}, {:wednesday, 3}] iex(2)\u0026gt; days = [monday: 1, tuesday: 2, wednesday: 3] + Allows you to omit the square brackets if the last argument is a keyword list iex(8)\u0026gt; IO.inspect([100, 200, 300], width: 3, limit: 1) [100, ...] + MapSet + The implementation of a set + store of unique values iex(1)\u0026gt; days = MapSet.new([:monday, :tuesday, :wednesday]) MapSet.new([:monday, :tuesday, :wednesday]) + Times and dates # Date iex(1)\u0026gt; date = ~D[2023-01-31] ~D[2023-01-31] iex(2)\u0026gt; date.year 2023 iex(3)\u0026gt; date.month 1 # Time iex(1)\u0026gt; time = ~T[11:59:12.00007] # NativDateTime iex(1)\u0026gt; naive_datetime = ~N[2023-01-31 11:59:12.000007] # DateTime, work with datetimes and supports time zones iex(1)\u0026gt; datetime = ~U[2023-01-31 11:59:12.000007Z] + DateTime + IO lists + Special sort of list that’s useful for incrementally building output that will be forwarded to an I/O device\n+ Element must one of following + An integer in the range of 0 to 255 + A binary + An IO list iex(1)\u0026gt; iolist = [[[~c\u0026#34;He\u0026#34;], \u0026#34;llo,\u0026#34;], \u0026#34; worl\u0026#34;, \u0026#34;d!\u0026#34;] + appending to an IO list is O(1) because you can use nesting iex(3)\u0026gt; iolist = [] iolist = [iolist, \u0026#34;This\u0026#34;] iolist = [iolist, \u0026#34; is\u0026#34;] iolist = [iolist, \u0026#34; an\u0026#34;] iolist = [iolist, \u0026#34; IO list.\u0026#34;] + Operators\n| Operator | Decription | | \\ =, ! | Strict equality/inequality | | ==,!= | Weak equality/inequality | | \u0026lt;, \u0026gt;, \u0026gt;=, \u0026lt;= | Less than, greater than, less than or equal, greater than or equal | Macros\nperform powerful code transformations at compile time unless some_expression do block_1 else block_2 end # tranform to if some_expression do block_2 else block_1 end Understanding the runtime\nWhen start runtime, an OS process for the BEAM instance is started\nVM keeps track of all modules loaded in-memory\nIf module is not loaded\ntries to find the compiled module file—the bytecode—on the disk Module name is alias correspond to :\u0026quot;Elixir:ModuleName\u0026quot;\nGeometry correspond to :\u0026quot;Elixir.Geometry\u0026quot;\nelixirc generate .beam file\nmultiple module in one file, elixirc will generate multiple .beam file When call function of a module\nThe VM looks for the file in the current folder and then in the code paths\ncode path are used: :code.get_path\nErlang module use simple filenames\n:code.get_path\nxyz.beam\nxyz is the expanded form of an alias\nElixir.MyModule when the module is named MyModule Dynamically calling functions\niex(1)\u0026gt; apply(IO, :puts, [\u0026#34;Dynamic function call.\u0026#34;]) Dynamic function call. + Starting the runtime + interactive shell + `iex` + shell is *interprets* input, not performant as compiled code + but modules are always compiled + running scripts + `elixir mys_ource.ex` + The BEAM instance is started. + The file my_source.ex is compiled in-memory, and the resulting modules are loaded to the VM. No .beam file is generated on the disk. + Whatever code resides outside of a module is interpreted. + Once everything is finished, BEAM is stopped. + `--no halt` make BEAM instance not to terminate + the `mix` tool + Whenever you need to build a production-ready system, mix is your best option. + ","permalink":"http://localhost:1313/pages/chapter-2/","summary":"\u003cp\u003eOrganizing code\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eModules\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA module is a collection of functions, somewhat like a namespace\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGeometry\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e rectangle_area(a, b) \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \ta\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eb\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eFunctions\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e rectangle_area(a, b) \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e rectangle_area(a, b), \u003cspan style=\"color:#e6db74\"\u003edo\u003c/span\u003e: a \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e b\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ Arity\n\n\n  + the number of arguments a function receives\n\n  + A function is uniquely identified by its containing module, name, and arity\n\n  + Rectangle.area/2, where /2 denotes the function’s arity.\n\n  + same name but different arities are two different functions\n\n  + commonly, a lower-arity function delegates to a higher-arity function, providing some default arguments\n\n  + `\\\\` operator followed by the argument’s default value\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCalculator\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e add(a, b \\\\ \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e), \u003cspan style=\"color:#e6db74\"\u003edo\u003c/span\u003e: a \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e b\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e    + generates two functions\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCalculator\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e add(a), \u003cspan style=\"color:#e6db74\"\u003edo\u003c/span\u003e: add(a, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e add(a, b), \u003cspan style=\"color:#e6db74\"\u003edo\u003c/span\u003e: a\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003eb\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e  + cannot accept a variable number of arguments\n\n+ Visibility\n\n\n  + `def` macro is `exported`\n\n  + `defp` macro is private\n\n    + can be used only inside the module it’s defined in\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eImports and alias\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Import\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyModule\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIO\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e my_function \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \tputs \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Calling imported function.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ Importing a module allows to call its public functions without prefixing them with the module name\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Alias\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyModule\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003ealias\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIO\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003eas\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eMyIO\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e my_function \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t\u003cspan style=\"color:#a6e22e\"\u003eMyIO\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eputs(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Calling imported function.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyModule\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003ealias\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGeometry.Rectangle\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003eas\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eRectangle\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e my_function \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t\u003cspan style=\"color:#a6e22e\"\u003eRectangle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earea(...)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eModule attributes\u003c/p\u003e","title":"Chapter 2"},{"content":"Pattern matching\n= operator is called the match operator\nassignment-like expression is an example of pattern matching iex(1)\u0026gt; person = {\u0026#34;Bob\u0026#34;, 25} + Matching tuples iex(1)\u0026gt; {name, age} = {\u0026#34;Bob\u0026#34;, 25} + Matching constants iex(2)\u0026gt; person = {:person, \u0026#34;Bob\u0026#34;, 25} iex(3)\u0026gt; {:person, name, age} = person {:person, \u0026#34;Bob\u0026#34;, 25} {:ok, contents} = File.read(\u0026#34;my_app.config\u0026#34;) + By using constants in patterns, you tighten the match, ensuring some part of the right side has a specific value. + `^` pin operator iex(7)\u0026gt; expected_name = \u0026#34;Bob\u0026#34; \u0026#34;Bob\u0026#34; iex(8)\u0026gt; {^expected_name, _} = {\u0026#34;Bob\u0026#34;, 25} {\u0026#34;Bob\u0026#34;, 25} iex(9)\u0026gt; {^expected_name, _} = {\u0026#34;Alice\u0026#34;, 30} ** (MatchError) no match of right hand side value: {\u0026#34;Alice\u0026#34;, 30} + Using `^expected_name` in patterns indicates you expect the value of the variable `expected_name` to be in the appropriate position in the right-side term + like `({\u0026quot;Bob\u0026quot;, _} = …)` + Matching lists iex(1)\u0026gt; [first, second, third] = [1, 2, 3] [1, 2, 3] iex(3)\u0026gt; [head | tail] = [1, 2, 3] [1, 2, 3] iex(4)\u0026gt; head 1 iex(5)\u0026gt; tail [2, 3] + Matching maps iex(1)\u0026gt; %{name: name, age: age} = %{name: \u0026#34;Bob\u0026#34;, age: 25} %{age: 25, name: \u0026#34;Bob\u0026#34;} iex(6)\u0026gt; %{age: age, works_at: works_at} = %{name: \u0026#34;Bob\u0026#34;, age: 25} ** (MatchError) no match of right hand side value + Matching bitstrings and binaries iex(6)\u0026gt; \u0026lt;\u0026lt;b1, rest :: binary\u0026gt;\u0026gt; = binary \u0026lt;\u0026lt;1, 2, 3\u0026gt;\u0026gt; iex(7)\u0026gt; b1 1 iex(8)\u0026gt; rest \u0026lt;\u0026lt;2, 3\u0026gt;\u0026gt; + Matching binary strings iex(16)\u0026gt; command = \u0026#34;ping www.example.com\u0026#34; \u0026#34;ping www.example.com\u0026#34; iex(17)\u0026gt; \u0026#34;ping \u0026#34; \u0026lt;\u0026gt; url = command \u0026#34;ping www.example.com\u0026#34; iex(18)\u0026gt; url \u0026#34;www.example.com\u0026#34; + Compound matches + match expression + `pattern = expression` + `iex(2)\u0026gt; a = 1 + 3` + 1 The expression on the right side is evaluated. + 2 The resulting value is matched against the left-side pattern. + 3 Variables from the pattern are bound. + 4 The result of the match expression is the result of the right-side term + match chaining iex(3)\u0026gt; a = (b = 1 + 3) 4 iex(4)\u0026gt; a =b=1+3 4 + 1 The expression 1 + 3 is evaluated. + 2 The result (4) is matched against the pattern b. + 3 The result of the inner match (which is, again, 4) is matched against the pattern a. iex(6)\u0026gt; date_time = {_, {hour, _, _}} = :calendar.local_time() iex(7)\u0026gt; {_, {hour, _, _}} = date_time = :calendar.local_time() iex(8)\u0026gt; date_time {{2023, 11, 11}, {21, 32, 34}} iex(9)\u0026gt; hour 21 + ordering is not matter + because the result of a pattern match is always the result of the term being matched (whatever is on the right side of the match operator) + General behavior + two parts: + *pattern* (left side) + *term* (right side) + You assert your expectations about the right-side term. If these expectations aren’t met, an error is raised. + You bind some parts of the term to variables from the pattern. Matching with functions def my_fun(arg1, arg2) do ... end + `arg1` and `arg2` are patterns + the arguments you provide are matched against the patterns specified in the function definition + Multiclause functions + A clause is a function definition specified by the def expression defmodule Geometry do def area({:rectangle, a, b}) do a*b end def area({:square, a}) do a*a end def area({:circle, r}) do r * r * 3.14 end end + clause order is matter, the runtime tries to select the clauses, using the order in the source code + Guards + The guard is a logical expression that adds further conditions to the pattern defmodule TestNum do def test(x) when x \u0026lt; 0 do :negative end def test(x) when x == 0 do :zero end def test(x) when x \u0026gt; 0 do :positive end end + operators and functions allowed in guards + Comparison operators (=\\=, !=, =\\ , ! , \u0026gt;, \u0026lt;, \u0026lt;=, and \u0026gt;=) + Boolean operators (and and or) and negation operators (not and !) + Arithmetic operators (+, -, *, and /) + Type-check functions from the Kernel module (e.g., is_number/1, is_atom/1, and so on) + https://hexdocs.pm/elixir/patterns-and-guards.html#guards + when error raised inside guard, it won't propagate, guard expression will return `false`. The corresponding clause won’t match, but some other clause might + Multiclause lambdas + general lambda syntax fn pattern_1, pattern_2 -\u0026gt; ... pattern_3, pattern_4 -\u0026gt; ... ... end iex(3)\u0026gt; test_num = fn x when is_number(x) and x \u0026lt; 0 -\u0026gt; :negative x when x == 0 -\u0026gt; :zero x when is_number(x) and x \u0026gt; 0 -\u0026gt; :positive end Conditionals\nBranching with multiclause functions iex(1)\u0026gt; defmodule Polymorphic do def double(x) when is_number(x), do: 2 * x def double(x) when is_binary(x), do: x \u0026lt;\u0026gt; x end iex(2)\u0026gt; Polymorphic.double(3) 6 iex(3)\u0026gt; Polymorphic.double(\u0026#34;Jar\u0026#34;) \u0026#34;JarJar\u0026#34; + Classical branching expressions + if and unless if condition do ... else ... end if condition, do: something, else: another_thing unless result == :error, do: send_notification(...) + cond cond do expression_1 -\u0026gt; ... expression_2 -\u0026gt; ... ... end + case case expression do pattern_1 -\u0026gt; ... pattern_2 -\u0026gt; ... ... end + no differences between case and multiclause functions + The with expression def extract_user(user) do case extract_login(user) do {:error, reason} -\u0026gt; {:error, reason} {:ok, login} -\u0026gt; case extract_email(user) do {:error, reason} -\u0026gt; {:error, reason} {:ok, email} -\u0026gt; case extract_password(user) do {:error, reason} -\u0026gt; {:error, reason} {:ok, password} -\u0026gt; %{login: login, email: email, password: password} end end end end def extract_user(user) do with {:ok, login} \u0026lt;- extract_login(user), {:ok, email} \u0026lt;- extract_email(user), {:ok, password} \u0026lt;- extract_password(user) do {:ok, %{login: login, email: email, password: password}} end end Loops and iterations\nThe principal looping tool in Elixir is recursion defmodule ListHelper do def sum([]), do: 0 def sum([head | tail]) do head + sum(tail) end end + Tail function calls + If the last thing a function does is call another function (or itself), you’re dealing with a tail call def original_fun(...) do ... another_fun(...) end defmodule ListHelper do def sum(list) do do_sum(0, list) end defp do_sum(current_sum, []) do current_sum end defp do_sum(current_sum, [head | tail]) do new_sum = head + current_sum do_sum(new_sum, tail) end end + Recognizing tail calls def fun(...) do ... if something do ... another_fun(...) # Tail call end end def fun(...) do 1 + another_fun(...) # Not a tail call end + After another_fun finishes, you must increment its result by 1 to compute the final result of fun + https://github.com/sasa1977/elixir-in-action/blob/3rd-edition/code_samples/ch03/recursion_practice_tc.ex + Higher-order functions + A higher-order function is a type of function that takes one or more functions as its input or returns one or more functions (or both) iex(1)\u0026gt; Enum.each( [1, 2, 3], fn x -\u0026gt; IO.puts(x) end ) 1 2 3 + Comprehensions iex(4)\u0026gt; multiplication_table = for x \u0026lt;- 1..9, y \u0026lt;- 1..9, into: %{} do {{x, y}, x*y} end + Streams + A stream is a special kind of enumerable that can be useful for doing lazy composable operations over anything enumerable iex(7)\u0026gt; employees |\u0026gt; Stream.with_index() |\u0026gt; Enum.each(fn {employee, index} -\u0026gt; IO.puts(\u0026#34;#{index + 1}. #{employee}\u0026#34;) end) ","permalink":"http://localhost:1313/pages/chapter-3/","summary":"\u003cp\u003ePattern matching\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003e=\u003c/code\u003e operator is called the match operator\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eassignment-like expression is an example of \u003cem\u003epattern matching\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; person \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e, 25\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ Matching tuples\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003ename, age\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e, 25\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ Matching constants\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e2\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; person \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e:person, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e, 25\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e3\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e:person, name, age\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e person\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e:person, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e, 25\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e:ok, contents\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e File.read\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;my_app.config\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e  + By using constants in patterns, you tighten the match, ensuring some part of the right side has a specific value.\n\n  + `^` pin operator\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e7\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; expected_name \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e8\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e^expected_name, _\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e, 25\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e, 25\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e9\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e^expected_name, _\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Alice\u0026#34;\u003c/span\u003e, 30\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e** \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eMatchError\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e no match of right hand side value: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Alice\u0026#34;\u003c/span\u003e, 30\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e    + Using `^expected_name` in patterns indicates you expect the value of the variable `expected_name` to be in the appropriate position in the right-side term\n\n      + like `({\u0026quot;Bob\u0026quot;, _} = …)`\n\n+ Matching lists\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003efirst, second, third\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e1, 2, 3\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e1, 2, 3\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e3\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ehead | tail\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e1, 2, 3\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e1, 2, 3\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e4\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; head\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e5\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; tail\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e2, 3\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ Matching maps\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; %\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003ename: name, age: age\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e %\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003ename: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e, age: 25\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003eage: 25, name: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e6\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; %\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003eage: age, works_at: works_at\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e %\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003ename: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e, age: 25\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e** \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eMatchError\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e no match of right hand side value\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ Matching bitstrings and binaries\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-bahs\" data-lang=\"bahs\"\u003eiex(6)\u0026gt; \u0026lt;\u0026lt;b1, rest :: binary\u0026gt;\u0026gt; = binary\n\u0026lt;\u0026lt;1, 2, 3\u0026gt;\u0026gt;\n\niex(7)\u0026gt; b1\n1\n\niex(8)\u0026gt; rest\n\u0026lt;\u0026lt;2, 3\u0026gt;\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e+ Matching binary strings\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e16\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; command \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ping www.example.com\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ping www.example.com\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e17\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ping \u0026#34;\u003c/span\u003e \u0026lt;\u0026gt; url \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e command\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ping www.example.com\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e18\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; url\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;www.example.com\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ Compound matches\n\n\n  + match expression\n\n\n    + `pattern = expression`\n\n    + `iex(2)\u0026gt; a = 1 + 3`\n\n      + 1 The expression on the right side is evaluated.\n\n      + 2 The resulting value is matched against the left-side pattern.\n\n      + 3 Variables from the pattern are bound.\n\n      + 4 The result of the match expression is the result of the right-side term\n\n    + match chaining\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e3\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eb \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e + 3\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e4\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e1+3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e      + 1 The expression 1 + 3 is evaluated.\n\n      + 2 The result (4) is matched against the pattern b.\n\n      + 3 The result of the inner match (which is, again, 4) is matched against the pattern a.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e6\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; date_time \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e_, \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003ehour, _, _\u003cspan style=\"color:#f92672\"\u003e}}\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e :calendar.local_time\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e7\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e_, \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003ehour, _, _\u003cspan style=\"color:#f92672\"\u003e}}\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e date_time \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e :calendar.local_time\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e8\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; date_time\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e{{\u003c/span\u003e2023, 11, 11\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e21, 32, 34\u003cspan style=\"color:#f92672\"\u003e}}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e9\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; hour\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e21\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e      + ordering is not matter\n\n        + because the result of a pattern match is always the result of the term being matched (whatever is on the right side of the match operator)\n\n+ General behavior\n\n\n  + two parts:\n\n    + *pattern* (left side)\n\n    + *term* (right side)\n\n  + You assert your expectations about the right-side term. If these expectations aren’t met, an error is raised.\n\n  + You bind some parts of the term to variables from the pattern.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eMatching with functions\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e my_fun(arg1, arg2) \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ `arg1` and `arg2` are patterns\n\n+ the arguments you provide are matched against the patterns specified in the function definition\n\n+ Multiclause functions\n\n\n  + A clause is a function definition specified by the def expression\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGeometry\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e area({\u003cspan style=\"color:#e6db74\"\u003e:rectangle\u003c/span\u003e, a, b}) \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    a\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eb\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e area({\u003cspan style=\"color:#e6db74\"\u003e:square\u003c/span\u003e, a}) \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \ta\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ea\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e area({\u003cspan style=\"color:#e6db74\"\u003e:circle\u003c/span\u003e, r}) \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \tr \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e r \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3.14\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e  + clause order is matter, the runtime tries to select the clauses, using the order in the source code\n\n+ Guards\n\n\n  + The guard is a logical expression that adds further conditions to the pattern\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTestNum\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e test(x) \u003cspan style=\"color:#f92672\"\u003ewhen\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t\u003cspan style=\"color:#e6db74\"\u003e:negative\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e test(x) \u003cspan style=\"color:#f92672\"\u003ewhen\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t\u003cspan style=\"color:#e6db74\"\u003e:zero\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e test(x) \u003cspan style=\"color:#f92672\"\u003ewhen\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t\u003cspan style=\"color:#e6db74\"\u003e:positive\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e  + operators and functions allowed in guards\n\n    + Comparison operators (=\\=, !=, =\\\u003cmark\u003e\n    , !\n\u003c/mark\u003e, \u0026gt;, \u0026lt;, \u0026lt;=, and \u0026gt;=)\n\n    + Boolean operators (and and or) and negation operators (not and !)\n\n    + Arithmetic operators (+, -, *, and /)\n\n    + Type-check functions from the Kernel module (e.g., is_number/1, is_atom/1, and so on)\n\n    + https://hexdocs.pm/elixir/patterns-and-guards.html#guards\n\n  + when error raised inside guard, it won't propagate, guard expression will return `false`. The corresponding clause won’t match, but some other clause might\n\n+ Multiclause lambdas\n\n\n  + general lambda syntax\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  pattern_1, pattern_2 \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  pattern_3, pattern_4 \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e3\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; test_num \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efn\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  x when is_number\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e and x \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e -\u0026gt; :negative\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  x when x \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e -\u0026gt; :zero\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  x when is_number\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e and x \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e -\u0026gt; :positive\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eend\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eConditionals\u003c/p\u003e","title":"Chapter 3"},{"content":"Basic principles of abstraction in Elixir\nA module is in charge of abstracting some behavior.\nThe module’s functions usually expect an instance of the abstraction as the first argument.\nModifier functions return a modified version of the abstraction.\nQuery functions return some other type of data.\nAbstracting with modules\ndefmodule TodoList do ... def add_entry(todo_list, entry) do entry = Map.put(entry, :id, todo_list.next_id) new_entries = Map.put( todo_list.entries, todo_list.next_id, entry ) %TodoList{todo_list | entries: new_entries, next_id: todo_list.next_id + 1 } end ... end + The entire operation will be atomic + This is the consequence of immutability. The effect of adding an entry is visible to others only when the `add_entry/2` function finishes and its result is taken into a variable. If something goes wrong and you raise an error, the effect of any transformations won’t be visible Polymorphism with protocols\ndefprotocol String.Chars do def to_string(term) end defimpl String.Chars, for: Integer do def to_string(term) do Integer.to_string(term) end end type can be any other arbitrary alias (but not a regular, simple atom) ","permalink":"http://localhost:1313/pages/chapter-4/","summary":"\u003cp\u003eBasic principles of abstraction in Elixir\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eA module is in charge of abstracting some behavior.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe module’s functions usually expect an instance of the abstraction as the first\nargument.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eModifier functions return a modified version of the abstraction.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eQuery functions return some other type of data.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAbstracting with modules\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTodoList\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e add_entry(todo_list, entry) \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    entry \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eput(entry, \u003cspan style=\"color:#e6db74\"\u003e:id\u003c/span\u003e, todo_list\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enext_id)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    new_entries \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eput(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      todo_list\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eentries,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      todo_list\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enext_id,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      entry\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    %\u003cspan style=\"color:#a6e22e\"\u003eTodoList\u003c/span\u003e{todo_list \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#e6db74\"\u003eentries\u003c/span\u003e: new_entries,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#e6db74\"\u003enext_id\u003c/span\u003e: todo_list\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enext_id \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ The entire operation will be atomic\n\n+ This is the consequence of immutability. The effect of adding an entry is visible to others only when the `add_entry/2` function finishes and its result is taken into a variable. If something goes wrong and you raise an error, the effect of any transformations won’t be visible\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePolymorphism with protocols\u003c/p\u003e","title":"Chapter 4"},{"content":"Concurrency primitives\nCreating processes iex(1)\u0026gt; run_query = fn query_def -\u0026gt; Process.sleep(2000) \u0026#34;#{query_def} result\u0026#34; end spawn(fn -\u0026gt; expression_1 ... expression_n end) iex(4)\u0026gt; spawn(fn -\u0026gt; query_result = run_query.(\u0026#34;query 1\u0026#34;) IO.puts(query_result) end) #PID\u0026lt;0.48.0\u0026gt; query 1 result # Printed after 2 seconds iex(5)\u0026gt; async_query = fn query_def -\u0026gt; spawn(fn -\u0026gt; query_result = run_query.(query_def) IO.puts(query_result) end) end iex(6)\u0026gt; async_query.(\u0026#34;query 1\u0026#34;) #PID\u0026lt;0.52.0\u0026gt; query 1 result # 2 senconds later iex(7)\u0026gt; Enum.each(1..5, \u0026amp;async_query.(\u0026#34;query #{\u0026amp;1}\u0026#34;)) :ok query 1 result query 2 result query 3 result query 4 result query 5 result # 2 seconds later Message passing\nself/0 get current process pid\nsend message\nsend(pid, {:an, :arbitrary, :term}) receive message\nreceive do pattern_1 -\u0026gt; do_something pattern_2 -\u0026gt; do_something_else end receive do message -\u0026gt; IO.inspect(message) after 5000 -\u0026gt; IO.puts(\u0026#34;message not received\u0026#34;) end + 1. Take the first message from the mailbox + 2. Try to match it against any of the provided patterns, going from top to bottom + 3. If a pattern matches the message, run the corresponding code + 4. If no pattern matches, take the next message, and start from step 2 + 5. If there are no more messages in the queue, wait for a new one to arrive. When a new message arrives, start from step 2. + 6. If the after clause is specified and no message is matched in the given amount of time, run the code from the after block. + Stateful server processes + server process + runs for a long time (or forever) and can handle various requests (messages) defmodule DatabaseServer do def start do spawn(\u0026amp;loop/0) end defp loop do receive do ... loop() end ... end end + server process is internally sequential def start do spawn(fn -\u0026gt; initial_state = ... loop(initial_state) end) end defp loop(state) do ... loop(state) end + The data should be modeled using pure functional abstractions + A stateful process serves as a container of such a data structure + The process keeps the state alive and allows other processes in the system to interact with this data via the exposed API. Registered processes iex(1)\u0026gt; Process.register(self(), :some_name) iex(2)\u0026gt; send(:some_name, :msg) iex(3)\u0026gt; receive do msg -\u0026gt; IO.puts(\u0026#34;received #{msg}\u0026#34;) end received msg + The name can only be an atom + A single process can have only one name + Two processes can’t have the same name Runtime considerations\nA process is sequential\nif many processes send messages to a single process, that single process may become a bottleneck, which significantly affects overall throughput of the system ","permalink":"http://localhost:1313/pages/chapter-5/","summary":"\u003cp\u003eConcurrency primitives\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreating processes\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e run_query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efn\u003c/span\u003e query_def \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eProcess\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esleep(\u003cspan style=\"color:#ae81ff\"\u003e2000\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003equery_def\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e result\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003espawn(\u003cspan style=\"color:#66d9ef\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  expression_1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  expression_n\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex(\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e spawn(\u003cspan style=\"color:#66d9ef\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  query_result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e run_query\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;query 1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eIO\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eputs(query_result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#PID\u0026lt;0.48.0\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003equery \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e result \u003cspan style=\"color:#75715e\"\u003e# Printed after 2 seconds\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex(\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e async_query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efn\u003c/span\u003e query_def \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    spawn(\u003cspan style=\"color:#66d9ef\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      query_result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e run_query\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e(query_def)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003eIO\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eputs(query_result)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex(\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e async_query\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;query 1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#PID\u0026lt;0.52.0\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003equery \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e result \u003cspan style=\"color:#75715e\"\u003e# 2 senconds later\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex(\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEnum\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eeach(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e..\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003easync_query\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;query \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003e\u0026amp;1\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e:ok\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003equery \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e result\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003equery \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e result\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003equery \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e result\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003equery \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e result\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003equery \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e result \u003cspan style=\"color:#75715e\"\u003e# 2 seconds later\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eMessage passing\u003c/p\u003e","title":"Chapter 5"},{"content":"Generic server processes\nstart\ninit\nhandle_call is synchronous request\nhandle_cast is asynchronous request\nhandle_info handle plain messages, not specific to GenServer\ncallback function execute in server process\nPlugging into GenServer\ndefmodule KeyValueStore do use GenServer end + `use` macro + During compilation, when this instruction is encountered, the specific macro from the `GenServer` module is invoked. That macro then injects several functions into the calling module + use `@impl GenServer` to tells the compiler that the function about to be defined is a callback function for the GenServer behaviour defmodule EchoServer do use GenServer @impl GenServer def handle_call(some_request, server_state) do {:reply, some_request, server_state} end end + name registration GenServer.start( CallbackModule, init_param, name: :some_name ) # During compilation, __MODULE__ is replaced with the name of the module where the code resides: defmodule KeyValueStore do def start() do GenServer.start(__MODULE__, nil, name: __MODULE__) end def put(key, value) do GenServer.cast(__MODULE__, {:put, key, value}) end ... end + `{:stop, reason}` or `:ignore` to stop server process + `handle_call` return `{:stop, reason, response, new_state}` Process lifecycle ","permalink":"http://localhost:1313/pages/chapter-6/","summary":"\u003cp\u003eGeneric server processes\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003estart\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003einit\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ehandle_call\u003c/code\u003e is synchronous request\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ehandle_cast\u003c/code\u003e is asynchronous request\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ehandle_info\u003c/code\u003e handle plain messages, not specific to \u003ccode\u003eGenServer\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ecallback function execute in server process\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePlugging into GenServer\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eKeyValueStore\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#f92672\"\u003euse\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGenServer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ `use` macro\n\n  + During compilation, when this instruction is encountered, the specific macro from the `GenServer` module is invoked. That macro then injects several functions into the calling module\n\n+ use `@impl GenServer` to tells the compiler that the function about to be defined is a callback function for the GenServer behaviour\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEchoServer\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003euse\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGenServer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003e@impl\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGenServer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e handle_call(some_request, server_state) \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t{\u003cspan style=\"color:#e6db74\"\u003e:reply\u003c/span\u003e, some_request, server_state}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ name registration\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eGenServer\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estart(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eCallbackModule\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  init_param,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e:some_name\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# During compilation, __MODULE__ is replaced with the name of the module where the code resides:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eKeyValueStore\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e start() \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t\u003cspan style=\"color:#a6e22e\"\u003eGenServer\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estart(__MODULE__, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003ename\u003c/span\u003e: __MODULE__)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e put(key, value) \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t\u003cspan style=\"color:#a6e22e\"\u003eGenServer\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecast(__MODULE__, {\u003cspan style=\"color:#e6db74\"\u003e:put\u003c/span\u003e, key, value})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ `{:stop, reason}` or `:ignore` to stop server process\n\n  + `handle_call` return `{:stop, reason, response, new_state}`\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eProcess lifecycle\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/assets/2025-01-02_17-04-10_1735808663443_0.png\" alt=\"2025-01-02_17-04-10.png\"  /\u003e\n\u003c/p\u003e","title":"Chapter 6"},{"content":"Mix project conventions\nplace module under a common top-level alias\nlike Todo.List, Todo.Server one file, one module\nexcept small helper module or protocol implementation for the module filename should be an underscore-case\nTodoServer module would reside in todo_server.ex file in the lib folder The folder structure should correspond to multipart module names\nTodo.Server should reside in the lib/todo/server.ex file Addressing the process bottleneck\nuse process considerations\nThe code must manage a long-living state\nThe code handles a kind of resource that can and should be reused between multiple invocations, such as a TCP connection, database connection, file handle, and so on\nA critical section of the code must be synchronized. Only one instance of this code may be running in any moment\n","permalink":"http://localhost:1313/pages/chapter-7/","summary":"\u003cp\u003eMix project conventions\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eplace module under a common top-level alias\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003elike \u003ccode\u003eTodo.List\u003c/code\u003e, \u003ccode\u003eTodo.Server\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eone file, one module\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eexcept small helper module or protocol implementation for the module\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003efilename should be an underscore-case\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eTodoServer\u003c/code\u003e module would reside in \u003ccode\u003etodo_server.ex\u003c/code\u003e file in the lib folder\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe folder structure should correspond to multipart module names\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eTodo.Server\u003c/code\u003e should reside in the \u003ccode\u003elib/todo/server.ex\u003c/code\u003e file\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAddressing the process bottleneck\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003euse process considerations\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eThe code must manage a long-living state\u003c/p\u003e","title":"Chapter 7"},{"content":"Runtime errors\nerror types\nerrors, exits, and throws\nerror\nraise(\u0026#34;Something went wrong\u0026#34;) ** (RuntimeError) Something went wrong + exit iex(2)\u0026gt; spawn(fn -\u0026gt; exit(\u0026#34;I\u0026#39;m done\u0026#34;) IO.puts(\u0026#34;This doesn\u0026#39;t happen\u0026#34;) end) + throws iex(3)\u0026gt; throw(:thrown_value) ** (throw) :thrown_value Handling errors try do ... catch error_type, error_value -\u0026gt; ... end + `catch` blocks are patterns + tail call isn’t possible if the function call resides in a `try` expression A run-time error has a type, which can be :error, :exit, or :throw\nA run-time error also has a value, which can be any arbitrary term\nIf a run-time error isn’t handled, the corresponding process will terminate\nErrors in concurrent systems\nLinking processes\nlinks\nIf two processes are linked, and one of them terminates, the other process receives an exit signal—a notification that a process has crashed\nalways bidirectional\nnormal termination\nexit reason is :normal spawn(fn -\u0026gt; spawn_link(fn -\u0026gt; Process.sleep(1000) IO.puts(\u0026#34;Process 2 finished\u0026#34;) end) raise(\u0026#34;Something went wrong\u0026#34;) end) + the crash of a single process will emit exit signals to all of its linked processes. If the default behavior isn’t overridden, those processes will crash as well. Ultimately, the entire tree of linked processes will be taken down + Trapping exits + `Process.flag(:trap_exit, true)` spawn(fn -\u0026gt; Process.flag(:trap_exit, true) spawn_link(fn -\u0026gt; raise(\u0026#34;Something went wrong\u0026#34;) end) receive do msg -\u0026gt; IO.inspect(msg) end end) Monitors\nunidirectional propagation of a process crash\nmonitor_ref = Process.monitor(target_pid)\nSupervisors\nmanages the life cycle of other processes in a system\nThe supervisor process traps exits and then starts the child processes\nIf, at any point in time, a child terminates, the supervisor process receives a corresponding exit message and performs corrective actions, such as restarting the crashed process.\nIf the supervisor process terminates, its children are also taken down\nSupervisor.start_link([Todo.Cache], strategy: :one_for_one) + Child specification + How should the child be started? + What should be done if the child terminates? + What term should be used to uniquely identify each child? + to-do cache specification %{ id: Todo.Cache, start: {Todo.Cache, :start_link, [nil]}, } Supervisor.start_link( [ %{ id: Todo.Cache, start: {Todo.Cache, :start_link, [nil]} } ], strategy: :one_for_one ) + `module_name.child_spec(arg)` return the module specification + The default implementation is injected by use GenServer Supervisor.start_link( [{Todo.Cache, nil}], strategy: :one_for_one ) iex(1)\u0026gt; Todo.Cache.child_spec(nil) %{id: Todo.Cache, start: {Todo.Cache, :start_link, [nil]}} + When invoke `Supervisor.start_link(child_specs, options)` + The new process is started, powered by the Supervisor module + The supervisor process goes through the list of child specifications and starts each child, one by one + Each specification is resolved, if needed, by invoking child_spec/1 from the corresponding module + The supervisor starts the child process according to the :start field of the child specification + Restart frequency + Supervisor won’t restart a child process forever + By default, the maximum restart frequency is three restarts in 5 seconds + ","permalink":"http://localhost:1313/pages/chapter-8/","summary":"\u003cp\u003eRuntime errors\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eerror types\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eerrors, exits, and throws\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eerror\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eraise(\u0026#34;Something went wrong\u0026#34;)\n** (RuntimeError) Something went wrong\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e+ exit\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eiex(2)\u0026gt; spawn(fn -\u0026gt;\n    exit(\u0026#34;I\u0026#39;m done\u0026#34;)\n    IO.puts(\u0026#34;This doesn\u0026#39;t happen\u0026#34;)\n  end)\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e+ throws\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eiex(3)\u0026gt; throw(:thrown_value)\n** (throw) :thrown_value\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eHandling errors\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etry do\n  ...\n  catch error_type, error_value -\u0026gt;\n  ...\nend\n\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003e+ `catch` blocks are patterns\n\n+ tail call isn’t possible if the function call resides in a `try` expression\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eA run-time error has a type, which can be :error, :exit, or :throw\u003c/p\u003e","title":"Chapter 8"},{"content":"Use Registry to register process and then discover it\niex(1)\u0026gt; Registry.start_link(name: :my_registry, keys: :unique) iex(2)\u0026gt; spawn(fn -\u0026gt; Registry.register(:my_registry, {:database_worker, 1}, nil) receive do msg -\u0026gt; IO.puts(\u0026#34;got message #{inspect(msg)}\u0026#34;) end end) iex(3)\u0026gt; [{db_worker_pid, _value}] = Registry.lookup( :my_registry, {:database_worker, 1} ) iex(4)\u0026gt; send(db_worker_pid, :some_message) got message :some_message Via tuples\nallows you to use an arbitrary third-party registry to register OTP-compliant processes, such as GenServer and supervisors\nGenServer.start_link(callback_module, some_arg, name: some_name)\n:name option can also be provided in the shape of {:via, some_module, some_arg}. Such a tuple is also called a via tuple defmodule Todo.ProcessRegistry do def start_link do Registry.start_link(keys: :unique, name: __MODULE__) end def via_tuple(key) do {:via, Registry, {__MODULE__, key}} end def child_spec(_) do Supervisor.child_spec( Registry, id: __MODULE__, start: {__MODULE__, :start_link, []} ) end end Supervision tree\na nested structure of supervisors and workers\ndescribes how the system is started and how it’s taken down\nThis is how error recovery works in supervision trees—you try to recover from an error locally, affecting as few processes as possible. If that doesn’t work, you move up and try to restart the wider part of the system\nOTP-compliant processes\nhttps://www.erlang.org/doc/design_principles/spec_proc.html#special-processes. Avoid process restarting\nrestart: :temporary in child_spec/1\nrestart: :transient in child_spec/1\nrestarted only if it terminates abnormally Restart strategies\n:one_for_one\na supervisor handles a process termination by starting a new process in its place, leaving other children alone :one_for_all\nWhen a child crashes, the supervisor terminates all other children and then starts all children :rest_for_one\nWhen a child crashes, the supervisor terminates all younger siblings of the crashed child. Then, the supervisor starts new child processes in place of the terminated ones\nyounger siblings means process which after crashed process in the supervisor childrens\nStarting processes dynamically\nDynamicSupervisor defmodule Todo.Cache do def start_link() do IO.puts(\u0026#34;Starting to-do cache.\u0026#34;) DynamicSupervisor.start_link( name: __MODULE__, strategy: :one_for_one ) end defp start_child(todo_list_name) do DynamicSupervisor.start_child( __MODULE__, {Todo.Server, todo_list_name} ) end ... end + `DynamicSupervisor.start_child/2` is a cross-process synchronous call Two important situations in which you should explicitly handle an error\nIn critical processes that shouldn’t crash\nWhen you expect an error that can be dealt with in a meaningful way\n","permalink":"http://localhost:1313/pages/chapter-9/","summary":"\u003cp\u003eUse \u003ccode\u003eRegistry\u003c/code\u003e to register process and then discover it\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; Registry.start_link\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ename: :my_registry, keys: :unique\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e2\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; spawn\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003efn -\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Registry.register\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e:my_registry, \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e:database_worker, 1\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e, nil\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  receive \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    msg -\u0026gt; IO.puts\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;got message #{inspect(msg)}\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  end\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eend\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e3\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[{\u003c/span\u003edb_worker_pid, _value\u003cspan style=\"color:#f92672\"\u003e}]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRegistry.lookup\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  :my_registry,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e:database_worker, 1\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e4\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; send\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003edb_worker_pid, :some_message\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egot message :some_message\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eVia tuples\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eallows you to use an arbitrary third-party registry to register OTP-compliant processes, such as GenServer and supervisors\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eGenServer.start_link(callback_module, some_arg, name: some_name)\u003c/code\u003e\u003c/p\u003e","title":"Chapter 9"},{"content":"Tasks\nThe Task module can be used to concurrently run a job\nAwaited tasks\nAn awaited task is a process that executes some function, sends the function result back to the starter process, and then terminates iex(1)\u0026gt; long_job = fn -\u0026gt; Process.sleep(2000) :some_result end iex(2)\u0026gt; task = Task.async(long_job) # await will wait response from the task process # default 5 seconds to timeout iex(3)\u0026gt; Task.await(task) :some_result + if any task process crashes, the starter process will crash too + `Task.async/1` has all-or-nothing semantics Non-awaited tasks iex(1)\u0026gt; Task.start_link(fn -\u0026gt; Process.sleep(1000) IO.puts(\u0026#34;Hello from task\u0026#34;) end) {:ok, #PID\u0026lt;0.89.0\u0026gt;} # Result of Task.start_link/1 Hello from task! # Printed 1 second later Supervising dynamic tasks iex(1)\u0026gt; Task.Supervisor.start_link(name: MyTaskSupervisor) iex(2)\u0026gt; Task.Supervisor.start_child( MyTaskSupervisor, fn -\u0026gt; IO.puts(\u0026#34;Task started\u0026#34;) Process.sleep(2000) IO.puts(\u0026#34;Task stopping\u0026#34;) end ) {:ok, #PID\u0026lt;0.118.0\u0026gt;} Task started Task stopping Agents\nprovides an abstraction that’s similar to GenServer\nrequire a bit less ceremony and can, therefore, eliminate some boilerplate associated with GenServer\niex(1)\u0026gt; {:ok, pid} = Agent.start_link(fn -\u0026gt; %{name: \u0026#34;Bob\u0026#34;, age: 30} end) {:ok, #PID\u0026lt;0.86.0\u0026gt;} iex(2)\u0026gt; Agent.get(pid, fn state -\u0026gt; state.name end) \u0026#34;Bob\u0026#34; + execute passed lambda Limitations of agents\ncannot handle plain messages\ncannot run some logic on termination\nETS tables\nETS (Erlang Term Storage) tables are a mechanism that allows you to share some state between multiple processes in a more efficient way\nusecase\nshared key–value structures and counters ETS characteristics\nThere’s no specific ETS data type. A table is identified by its ID (a reference type) or a global name (an atom).\nETS tables are mutable. A write to a table will affect subsequent read operations.\nMultiple processes can write to or read from a single ETS table. Writes and reads might be performed simultaneously.\nMinimum concurrency safety is ensured. Multiple processes can safely write to the same row of the same table. The last write wins.\nAn ETS table resides in a separate memory space. Any data coming in or out is deep copied.\nETS doesn’t put pressure on the garbage collector. Overwritten or deleted data is immediately released.\nAn ETS table is deeply connected to its owner process (by default, the process that created the table). If the owner process terminates, the ETS table is reclaimed.\nOther than on owner-process termination, there’s no automatic garbage collection of an ETS table. Even if you don’t hold a reference to the table, it still occupies memory.\niex(1)\u0026gt; table = :ets.new(:my_table, []) #Reference\u0026lt;0.970221231.4117102596.53103\u0026gt; iex(2)\u0026gt; :ets.insert(table, {:key_1, 1}) true iex(3)\u0026gt; :ets.insert(table, {:key_2, 2}) true iex(5)\u0026gt; :ets.lookup(table, :key_1) [key_1: 3] table types\n:set—This is the default. One row per distinct key is allowed\n:ordered_set—This is just like :set, but rows are in term order (comparison via the \u0026lt; and \u0026gt; operators)\n:bag—Multiple rows with the same key are allowed, but two rows can’t be completely identical\n:duplicate_bag—This is just like :bag, but it allows duplicate rows\ntable permissions\n:protected—This is the default. The owner process can read from and write to the table. All other processes can read from the table\n:public—All processes can read from and write to the table\n:private—Only the owner process can access the table\nfull-blown match specification\n:ets.select/2\nhttps://erlang.org/doc/man/ets.html#select-2\nmake task simpler\nex2ms\nhttps://github.com/ericmj/ex2ms ","permalink":"http://localhost:1313/pages/chapter-10/","summary":"\u003cp\u003eTasks\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eThe Task module can be used to concurrently run a job\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAwaited tasks\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAn awaited task is a process that executes some function, sends the function result back to the starter process, and then terminates\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; long_job \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  fn -\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Process.sleep\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e2000\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    :some_result\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  end\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e2\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; task \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Task.async\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003elong_job\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# await will wait response from the task process\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# default 5 seconds to timeout\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e3\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; Task.await\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003etask\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e:some_result\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ if any task process crashes, the starter process will crash too\n\n+ `Task.async/1` has all-or-nothing semantics\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eNon-awaited tasks\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; Task.start_link\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003efn -\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Process.sleep\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1000\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  IO.puts\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello from task\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eend\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e:ok, \u003cspan style=\"color:#75715e\"\u003e#PID\u0026lt;0.89.0\u0026gt;} # Result of Task.start_link/1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eHello from task! \u003cspan style=\"color:#75715e\"\u003e# Printed 1 second later\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eSupervising dynamic tasks\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; Task.Supervisor.start_link\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ename: MyTaskSupervisor\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e2\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\u0026gt; Task.Supervisor.start_child\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  MyTaskSupervisor,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  fn -\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    IO.puts\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Task started\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Process.sleep\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e2000\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    IO.puts\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Task stopping\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  end\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e:ok, \u003cspan style=\"color:#75715e\"\u003e#PID\u0026lt;0.118.0\u0026gt;}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTask started\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTask stopping\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAgents\u003c/p\u003e","title":"Chapter 10"},{"content":"OTP applications\nAn OTP application is a component that consists of multiple modules and that can depend on other applications\nWhen the application is started, the function HelloWorld.Application.start/2 is called\ndefmodule HelloWorld.Application do use Application def start(_type, _args) do children = [] opts = [strategy: :one_for_one, name: HelloWorld.Supervisor] Supervisor.start_link(children, opts) end end Starting the application\nstart the application in the running BEAM instance\ncall Application.start/1\nverifies whether all the applications you’re depending on are started\ncalling the callback module’s start/2 function\nApplication.ensure_all_started/2 is available, recursively starts all dependencies that aren’t yet started\nApplication.stop/1 to stop application\nSystem.stop/0 to stop entire system, including dependencies\nLibrary applications\nnot providemod: ... option in application/0 function defmodule HelloWorld.Application do ... def application do [] end ... end The compiled code structure YourProjectFolder _build dev lib App1 ebin priv App2 ... Visualizing the system\n:observer.start() Library guidelines\nhttps://hexdocs.pm/elixir/library-guidelines.html#avoid-application-configuration ","permalink":"http://localhost:1313/pages/chapter-11/","summary":"\u003cp\u003eOTP applications\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAn OTP application is a component that consists of multiple modules and that can depend on other applications\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhen the application is started, the function \u003ccode\u003eHelloWorld.Application.start/2\u003c/code\u003e is called\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edefmodule\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHelloWorld.Application\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003euse\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eApplication\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e start(_type, _args) \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    children \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    opts \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003estrategy\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e:one_for_one\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eHelloWorld.Supervisor\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eSupervisor\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estart_link(children, opts)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eStarting the application\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003estart the application in the running BEAM instance\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ecall \u003ccode\u003eApplication.start/1\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003everifies whether all the applications you’re depending on are started\u003c/p\u003e","title":"Chapter 11"},{"content":"Distribution primitives\nStarting a cluster $ iex --sname node1@localhost iex(node1@localhost)1\u0026gt; Node.connect(:node2@localhost) + Adding a new node to such a cluster amounts to establishing a connection to a single node from the cluster. The new node will then automatically connect to all nodes in the cluster + list all nodes in a cluster, including the current ont + `Node.list([:this, :visible])` Communicating between nodes\niex(node1@localhost)4\u0026gt; Node.spawn( :node2@localhost, fn -\u0026gt; IO.puts(\u0026#34;Hello from #{node()}\u0026#34;) end ) Hello from node2@localhost + lambda run in node2 + send messages to process + location transparency + send messages to process, regardless of their location iex(node1@localhost)5\u0026gt; caller = self() iex(node1@localhost)6\u0026gt; Node.spawn( :node2@localhost, fn -\u0026gt; send(caller, {:response, 1+2}) end ) iex(node1@localhost)7\u0026gt; flush() {:response, 3} + Whatever works in one BEAM instance will work across different instances + except lambda + you can use the same registered name on different nodes iex(node1@localhost)8\u0026gt; Process.register(self(), :shell) true iex(node2@localhost)3\u0026gt; Process.register(self(), :shell) true # send from node1 iex(node1@localhost)9\u0026gt; send( {:shell, :node2@localhost}, \u0026#34;Hello from node1!\u0026#34; ) iex(node2@localhost)4\u0026gt; flush() \u0026#34;Hello from node1!\u0026#34; + Process discovery + `Registry` isn’t cluster aware and works only in the scope of a local node + `:global` iex(node1@localhost)10\u0026gt; :global.register_name({:todo_list, \u0026#34;bob\u0026#34;}, self()) :yes iex(node2@localhost)6\u0026gt; :global.whereis_name({:todo_list, \u0026#34;bob\u0026#34;}) #PID\u0026lt;7954.90.0\u0026gt; GenServer.start_link( __MODULE__, arg, name: {:global, some_global_alias} ) GenServer.call({:global, some_global_alias}, ...) + groups of process + register several processes under the same alias + `pg` module + https://www.erlang.org/doc/man/pg.html iex(node1@localhost)1\u0026gt; :pg.start_link() iex(node2@localhost)1\u0026gt; Node.connect(:node1@localhost) iex(node2@localhost)2\u0026gt; :pg.start_link() iex(node1@localhost)2\u0026gt; :pg.join({:todo_list, \u0026#34;bob\u0026#34;}, self()) :ok iex(node2@localhost)3\u0026gt; :pg.join({:todo_list, \u0026#34;bob\u0026#34;}, self()) :ok iex(node1@localhost)3\u0026gt; :pg.get_members({:todo_list, \u0026#34;bob\u0026#34;}) [#PID\u0026lt;8531.90.0\u0026gt;, #PID\u0026lt;0.90.0\u0026gt;] iex(node2@localhost)4\u0026gt; :pg.get_members({:todo_list, \u0026#34;bob\u0026#34;}) [#PID\u0026lt;0.90.0\u0026gt;, #PID\u0026lt;7954.90.0\u0026gt;] + Links and monitors work even if processes reside on different nodes + `:rpc` module to call a function on remote node and get its result + Message passing is the core distribution primitive Network considerations\nnode can connect only to a node that has the same type of name\nCookies\nTo connect two nodes, they must agree on a magical cookie iex(node1@localhost)1\u0026gt; Node.get_cookie() :JHSKSHDYEJHDKEDKDIEN iex(node1@localhost)1\u0026gt; Node.set_cookie(:some_cookie) iex(node1@localhost)2\u0026gt; Node.get_cookie() :some_cookie $ iex --sname node1@localhost --cookie another_cookie iex(node1@localhost)1\u0026gt; Node.get_cookie() :another_cookie ","permalink":"http://localhost:1313/pages/chapter-12/","summary":"\u003cp\u003eDistribution primitives\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStarting a cluster\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ iex --sname node1@localhost\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e1\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNode.connect\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e:node2@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ Adding a new node to such a cluster amounts to establishing a connection to a single node from the cluster. The new node will then automatically connect to all nodes in the cluster\n\n+ list all nodes in a cluster, including the current ont\n\n  + `Node.list([:this, :visible])`\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eCommunicating between nodes\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e4\u0026gt; Node.spawn\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  :node2@localhost,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  fn -\u0026gt; IO.puts\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello from #{node()}\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e end\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eHello from node2@localhost\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e  + lambda run in node2\n\n+ send messages to process\n\n\n  + location transparency\n\n    + send messages to process, regardless of their location\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e5\u0026gt; caller \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e6\u0026gt; Node.spawn\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  :node2@localhost,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  fn -\u0026gt; send\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ecaller, \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e:response, 1+2\u003cspan style=\"color:#f92672\"\u003e})\u003c/span\u003e end\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e7\u0026gt; flush\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e:response, 3\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e  + Whatever works in one BEAM instance will work across different instances\n\n    + except lambda\n\n  + you can use the same registered name on different nodes\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e8\u0026gt; Process.register\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eself\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e, :shell\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etrue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode2@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e3\u0026gt; Process.register\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eself\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e, :shell\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etrue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# send from node1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e9\u0026gt; send\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e:shell, :node2@localhost\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello from node1!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode2@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e4\u0026gt; flush\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello from node1!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e+ Process discovery\n\n\n  + `Registry` isn’t cluster aware and works only in the scope of a local node\n\n  + `:global`\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e10\u0026gt; :global.register_name\u003cspan style=\"color:#f92672\"\u003e({\u003c/span\u003e:todo_list, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bob\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e, self\u003cspan style=\"color:#f92672\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e:yes\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode2@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e6\u0026gt; :global.whereis_name\u003cspan style=\"color:#f92672\"\u003e({\u003c/span\u003e:todo_list, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bob\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#PID\u0026lt;7954.90.0\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-elixir\" data-lang=\"elixir\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eGenServer\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estart_link(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  __MODULE__,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  arg,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003ename\u003c/span\u003e: {\u003cspan style=\"color:#e6db74\"\u003e:global\u003c/span\u003e, some_global_alias}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eGenServer\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecall({\u003cspan style=\"color:#e6db74\"\u003e:global\u003c/span\u003e, some_global_alias}, ...)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e  + groups of process\n\n    + register several processes under the same alias\n\n    + `pg` module\n\n      + https://www.erlang.org/doc/man/pg.html\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e1\u0026gt; :pg.start_link\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode2@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e1\u0026gt; Node.connect\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e:node1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode2@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e2\u0026gt; :pg.start_link\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e2\u0026gt; :pg.join\u003cspan style=\"color:#f92672\"\u003e({\u003c/span\u003e:todo_list, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bob\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e, self\u003cspan style=\"color:#f92672\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e:ok\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode2@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e3\u0026gt; :pg.join\u003cspan style=\"color:#f92672\"\u003e({\u003c/span\u003e:todo_list, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bob\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e, self\u003cspan style=\"color:#f92672\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e:ok\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode1@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e3\u0026gt; :pg.get_members\u003cspan style=\"color:#f92672\"\u003e({\u003c/span\u003e:todo_list, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bob\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#PID\u0026lt;8531.90.0\u0026gt;, #PID\u0026lt;0.90.0\u0026gt;]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiex\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003enode2@localhost\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e4\u0026gt; :pg.get_members\u003cspan style=\"color:#f92672\"\u003e({\u003c/span\u003e:todo_list, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bob\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#PID\u0026lt;0.90.0\u0026gt;, #PID\u0026lt;7954.90.0\u0026gt;]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e  + Links and monitors work even if processes reside on different nodes\n\n+ `:rpc` module to call a function on remote node and get its result\n\n+ Message passing is the core distribution primitive\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNetwork considerations\u003c/p\u003e","title":"Chapter 12"},{"content":"OTP releases\nAn OTP release is a standalone, compiled, runnable system that consists of the minimum set of OTP applications needed by the system $ mix release * assembling todo-0.1.0 on MIX_ENV=dev * using config/runtime.exs to configure the release at runtime Release created at _build/dev/rel/todo Using a release # start in the foreground with `iex` shell $ RELEASE_NODE=\u0026#34;todo@localhost\u0026#34; _build/prod/rel/todo/bin/todo start_iex # start in the background RELEASE_NODE=\u0026#34;todo@localhost\u0026#34; _build/prod/rel/todo/bin/todo daemon Analyzing system behavior\nThe key to understanding a highly concurrent system lies in logging and tracing\nIO.inspect\nsurround any part of the code with IO.inspect (or pipe into it via |\u0026gt;) without affecting the behavior of the program dgb\nhttps://hexdocs.pm/elixir/Kernel.html#dbg/2 pry\nhttps://hexdocs.pm/iex/IEx.html#pry/0\nhttps://hexdocs.pm/elixir/debugging.html\nbenchmarking and profiling tools\n:timer.tc/1\nhttps://erlang.org/doc/man/timer.html#tc-1 mix profile.cprof https://hexdocs.pm/mix/Mix.Tasks.Profile.Cprof.html\nmix profile.eprof https://hexdocs.pm/mix/Mix.Tasks.Profile.Eprof.html\nmix profile.fprof https://hexdocs.pm/mix/Mix.Tasks.Profile.Fprof.html\nBenchee\nhttps://hexdocs.pm/benchee https://www.erlang.org/doc/efficiency_guide/profiling.html\nLogging\nhttps://hexdocs.pm/logger/Logger.html\nhttps://www.erlang.org/doc/apps/kernel/logger_chapter.html\nTracing\niex(todo@localhost)1\u0026gt; :sys.trace(Todo.Cache.server_process(\u0026quot;bob\u0026quot;), true)\nexcessive tracing may hurt the system’s performance\n:dbg\niex(tracer@localhost)1\u0026gt; :dbg.tracer() iex(tracer@localhost)2\u0026gt; :dbg.n(:\u0026#34;todo@localhost\u0026#34;) iex(tracer@localhost)3\u0026gt; :dbg.p(:all, [:call]) iex(tracer@localhost)4\u0026gt; :dbg.tp(Todo.Server, []) (\u0026lt;12505.1106.0\u0026gt;) call \u0026#39;Elixir.Todo.Server\u0026#39;:whereis(\u0026lt;\u0026lt;\u0026#34;bob\u0026#34;\u0026gt;\u0026gt;) (\u0026lt;12505.1106.0\u0026gt;) call \u0026#39;Elixir.Todo.Server\u0026#39;:child_spec(\u0026lt;\u0026lt;\u0026#34;bob\u0026#34;\u0026gt;\u0026gt;) (\u0026lt;12505.1012.0\u0026gt;) call \u0026#39;Elixir.Todo.Server\u0026#39;:start_link(\u0026lt;\u0026lt;\u0026#34;bob\u0026#34;\u0026gt;\u0026gt;) (\u0026lt;12505.1107.0\u0026gt;) call \u0026#39;Elixir.Todo.Server\u0026#39;:init(\u0026lt;\u0026lt;\u0026#34;bob\u0026#34;\u0026gt;\u0026gt;) (\u0026lt;12505.1107.0\u0026gt;) call \u0026#39;Elixir.Todo.Server\u0026#39;:handle_continue(init, ...) (\u0026lt;12505.1106.0\u0026gt;) call \u0026#39;Elixir.Todo.Server\u0026#39;:entries(\u0026lt;12505.1107.0\u0026gt;, ...) (\u0026lt;12505.1107.0\u0026gt;) call \u0026#39;Elixir.Todo.Server\u0026#39;:handle_call({entries, ...}) + Recon + https://github.com/ferd/recon ","permalink":"http://localhost:1313/pages/chapter-13/","summary":"\u003cp\u003eOTP releases\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAn OTP release is a standalone, compiled, runnable system that consists of the minimum set of OTP applications needed by the system\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ mix release\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e* assembling todo-0.1.0 on MIX_ENV\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003edev\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e* using config/runtime.exs to configure the release at runtime\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRelease created at _build/dev/rel/todo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eUsing a release\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# start in the foreground with `iex` shell\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ RELEASE_NODE\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;todo@localhost\u0026#34;\u003c/span\u003e _build/prod/rel/todo/bin/todo start_iex\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# start in the background\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRELEASE_NODE\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;todo@localhost\u0026#34;\u003c/span\u003e _build/prod/rel/todo/bin/todo daemon\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnalyzing system behavior\u003c/p\u003e","title":"Chapter 13"}]